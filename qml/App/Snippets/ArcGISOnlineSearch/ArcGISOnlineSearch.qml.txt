import QtQuick 2.12
import QtQuick.Controls 2.5
import QtQuick.Layouts 1.12
import ArcGIS.AppFramework 1.0

Item {
    Button {
        text: qsTr("Search")

        onClicked: {
            _asyncToGenerator(function*() {
                try {
                    networkRequest.url = "https://www.arcgis.com/sharing/rest/search"
                    networkRequest.responseType = "json"
                    let f = "pjson"
                    let q = "type:Native Application owner:appstudio_samples"
                    let start = 1
                    let num = 10
                    let count = 0
                    while (start !== -1 ) {
                        let resp = yield networkRequest.sendWithPromise( { f, q, start, num } );
                        let { nextStart, total, results } = resp.response
                        for ( let result of results ) {
                            console.log( ++count, "/", total, result.title )
                        }
                        start = nextStart
                    }
                } catch (err) {
                    console.log("Caught exception: ", err.message)
                    console.log(err.stack)
                    throw err
                }
            } )()
        }
    }

    NetworkRequest {
        id: networkRequest

        property var _resolve
        property var _reject

        uploadPrefix: "file://"

        onReadyStateChanged: {
            if (readyState !== 4) return
            if (status < 200 || status >= 299) {
                _reject( new Error( qsTr("Download failure %1: Status Code %2: %3").arg(url).arg(status).arg(statusText) ) )
                return
            }
            if (errorCode !== 0)
            {
                _reject( new Error( qsTr("Download failure %1: Error Code %2: %3").arg(url).arg(error).arg(errorText) ) )
                return
            }
            _resolve( networkRequest )
        }

        function sendWithPromise( ...form ) {
            return new Promise( function (resolve, reject) {
                _resolve = resolve
                _reject = reject
                send( ...form )
            } )
        }
    }

    function _asyncToGenerator(fn) {
        return function() {
            var self = this,
            args = arguments
            return new Promise(function(resolve, reject) {
                var gen = fn.apply(self, args)
                function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value)
                }
                function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err)
                }
                _next(undefined)
            })
        }
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
            var info = gen[key](arg)
            var value = info.value
        } catch (error) {
            reject(error)
            return
        }
        if (info.done) {
            resolve(value)
        } else {
            Promise.resolve(value).then(_next, _throw)
        }
    }
}
