import QtQuick 2.12
import QtQuick.Controls 2.5
import QtQuick.Layouts 1.12
import ArcGIS.AppFramework 1.0

Item {
    Button {
        text: qsTr("test Promise await")
        onClicked: testPromiseAwait()
    }

    /*
    function testPromiseAwait() {
        (async () => {
            try {
                console.log((await download("https://appstudio.arcgis.com")).title)
                console.log((await download("https://community.esri.com/groups/appstudio")).title)
                console.log((await download("https://community.esri.com/groups/survey123")).title)
            } catch (error) {
                console.log(error)
            }
        })()
    }
    */

    function testPromiseAwait() {
        _asyncToGenerator(function*() {
            try {
                console.log((yield download("https://appstudio.arcgis.com")).title)
                console.log((yield download("https://community.esri.com/groups/appstudio")).title)
                console.log((yield download("https://community.esri.com/groups/survey123")).title)
            } catch (err) {
                console.log(err)
            }
        })()
    }

    function _asyncToGenerator(fn) {
        return function() {
            var self = this,
            args = arguments
            return new Promise(function(resolve, reject) {
                var gen = fn.apply(self, args)
                function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value)
                }
                function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err)
                }
                _next(undefined)
            })
        }
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
            var info = gen[key](arg)
            var value = info.value
        } catch (error) {
            reject(error)
            return
        }
        if (info.done) {
            resolve(value)
        } else {
            Promise.resolve(value).then(_next, _throw)
        }
    }

    function download(url, ...form) {
        return new Promise( (resolve, reject) => {
            downloadComponent.createObject( app, { resolve, reject, url, form } )
        } )
    }

    Component {
        id: downloadComponent

        NetworkRequest {
            property var resolve
            property var reject
            property var form
            onReadyStateChanged: {
                if (readyState !== 4) return
                if (status < 200 || status >= 299) {
                    reject( new Error( qsTr("Download failure %1: Status Code %2: %3").arg(url).arg(status).arg(statusText) ) )
                }
                if (errorCode !== 0)
                {
                    reject( new Error( qsTr("Download failure %1: Error Code %2: %3").arg(url).arg(error).arg(errorText) ) )
                    destroy()
                    return
                }
                let data = {
                    url: url,
                    status: status,
                    title: ( responseText.match(/<title.*>(.*)<\/title>/) || [ ] ) [1],
                    responseText: responseText
                }
                resolve( data )
                destroy()
            }
            Component.onCompleted: send(...form)
        }
    }
}

